https://practice.geeksforgeeks.org/problems/shortest-source-to-destination-path3544/0/?track=md-graph&batchId=144

int shortestDistance(int N, int M, vector<vector<int>> A, int x, int y) {
        queue<pair<pair<int,int>,int>>q;
        if(x==0 and y==0)
        return 0;
        if(A[0][0]==0 or A[x][y]==0)
        return -1;
        int vis[251][251];
        q.push({{0,0},0});
        
        for(int i=0;i<251;i++)
        {
            for(int j=0;j<251;j++)
            vis[i][j]=INT_MAX;
        }
        vis[0][0]=0;
        while(!q.empty())
        {
            auto ele=q.front();
            q.pop();
            int ii=ele.first.first;
            int jj=ele.first.second;
            int dist=ele.second;
            if(ii==x and jj==y)
            return dist;
            if(jj+1<M and A[ii][jj+1]==1)
            {
                if(dist+1<vis[ii][jj+1])
                {
                    vis[ii][jj+1]=dist+1;
                    q.push({{ii,jj+1},dist+1});
                }
            }
            if(jj-1>=0 and A[ii][jj-1]==1)
            {
                if(dist+1<vis[ii][jj-1])
                {
                    vis[ii][jj-1]=dist+1;
                    q.push({{ii,jj-1},dist+1});
                }
            }
            if(ii+1<N and A[ii+1][jj]==1)
            {
                if(dist+1<vis[ii+1][jj])
                {
                    vis[ii+1][jj]=dist+1;
                    q.push({{ii+1,jj},dist+1});
                }
            }
            if(ii-1>=0 and A[ii-1][jj]==1)
            {
                if(dist+1<vis[ii-1][jj])
                {
                    vis[ii-1][jj]=dist+1;
                    q.push({{ii-1,jj},dist+1});
                }
            }
        }
        return -1;
    }
