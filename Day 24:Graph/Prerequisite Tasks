https://practice.geeksforgeeks.org/problems/prerequisite-tasks/0/?track=md-graph&batchId=144

	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    vector<int> adj[N];
	    for(auto i:prerequisites)
	    adj[i.second].push_back(i.first);
	    vector<int>indegree(N,0);
	    for(int i=0;i<N;i++)
	    {
	        for(auto j:adj[i])
	        indegree[j]++;
	    }
	    int count=0;
	    queue<int>q;
	    for(int i=0;i<N;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	            count++;
	        }
	    }
	    while(!q.empty())
	    {
	        int t=q.front();
	        q.pop();
	        for(auto i:adj[t])
	        {
	            indegree[i]--;
	            if(indegree[i]==0)
	            {
	                count++;
	                q.push(i);
	            }
	        }
	    }
	   // cout<<count<<" ";
	    return count==N;
	}
